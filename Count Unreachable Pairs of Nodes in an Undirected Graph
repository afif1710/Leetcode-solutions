class Solution {
public:
    vector<int> rank;
    vector<int> parent;

    int find(int x){
        if(x == parent[x]){
            return x;
        }

        return parent[x] = find(parent[x]);
    }

    void Union(int x, int y){
        int par_x = find(x);
        int par_y = find(y);

        if(par_x == par_y){
            return;
        }
        if(rank[par_x] > rank[par_y]){
            parent[par_y] = par_x;
        }else if(rank[par_x] < rank[par_y]){
            parent[par_x] = par_y;
        }else{
            parent[par_x] = par_y;
            rank[par_y]++;
        }
    }

    long long countPairs(int n, vector<vector<int>>& edges) {
        parent.resize(n);
        rank.resize(n, 0);
        for(int i = 0 ; i<n ; i++){
            parent[i] = i;
        }

        for(auto &vec: edges){
            int u = vec[0];
            int v = vec[1];

            Union(u, v);
        }

        unordered_map<int, int> mp;
        for(int i = 0; i<n ; i++){
            int par = find(i);
            mp[par]++;
        }

        long long int res = 0;
        long long int rem = n;
        for(auto &it: mp){
            int size = it.second;
            res += (size * (rem-size));
            rem -= size;
        }
        return res;
    }
};
