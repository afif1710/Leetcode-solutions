class Solution {
public:
    vector<vector<string>> res;
    int N;
    unordered_set <int> cols;
    unordered_set <int> diag;
    unordered_set <int> antiDiag;

  
    void solve(vector<string> &board, int row){
        if(row >= N){
            res.push_back(board);
            return;
        }
        
        for(int col = 0; col<N; col++){
            int diagonal = row+col;
            int antiDiagonal = row - col;

            if(cols.find(col) != cols.end() || diag.find(diagonal) != diag.end() || antiDiag.find(antiDiagonal) != antiDiag.end()){
                continue;
            }
            cols.insert(col);
            diag.insert(diagonal);
            antiDiag.insert(antiDiagonal);
            board[row][col] = 'Q';
            solve(board, row+1);
            board[row][col] = '.';

            cols.erase(col);
            diag.erase(diagonal);
            antiDiag.erase(antiDiagonal);

        }
    }
    vector<vector<string>> solveNQueens(int n) {
        N = n;
        vector<string> board(n, string(n, '.'));
        int row = 0;
        solve(board, row);
        return res;
    }
};
