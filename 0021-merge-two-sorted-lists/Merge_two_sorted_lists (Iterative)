/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(!list1){
            return list2;
        }else if(!list2){            //Checking edge cases, in case both or one of the lists are NULL
            return list1;
        }else if(!list1 && !list2){
            return NULL;
        }
        ListNode* head = NULL;          //Setting up the head which we'll return at last based on the smaller first value from both lists
        if(list1->val <= list2->val){
            head = list1;
            list1 = list1->next;
        }else{
            head = list2;
            list2 = list2->next;
        }
        ListNode* curr = head;          //Taking a curr ListNode to loop over both lists 

        while(list1 && list2){                  //Looping until 1 of the lists' pointer points to NULL
            if(list1->val <= list2->val){
                curr->next = list1;              // Update curr's next pointing 
                list1 = list1->next;
            }else{
                curr->next = list2;
                list2 = list2->next;
            }
            curr = curr->next;                  // Making sure curr pointer moves to the next one
        }
        if(list1){
            curr->next = list1;      //in case List1 wasn't completely iterated, then merge the rest of the list
        }else if(list2){
            curr->next = list2;      ////in case List2 wasn't completely iterated, then merge the rest of the list
        }

        return head;
    }
};
