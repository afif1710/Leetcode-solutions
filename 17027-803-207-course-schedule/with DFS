class Solution {
public:
    int n;
    bool isCycleDFS(unordered_map<int, vector<int>> &adj, vector<bool> &visited, vector<bool> &inRecursion, int u){
        visited[u] = true;
        inRecursion[u] = true;

        for(int &v: adj[u]){
            if(visited[v] && inRecursion[v]){
                return true;
            }
            if(!visited[v] && isCycleDFS(adj, visited, inRecursion, v)){
                return true;
            }
        }
        inRecursion[u] = false;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        n = numCourses;
        vector<bool> visited(n, false);
        vector<bool> inRecursion(n, false);
        unordered_map<int, vector<int>> adj;

        for(int u = 0; u < prerequisites.size(); u++){
            int a = prerequisites[u][0];
            int b = prerequisites[u][1];
            adj[b].push_back(a);
        }
        for(int i = 0; i < n; i++){
            if(!visited[i] && isCycleDFS(adj, visited, inRecursion, i)){
                return false;
            }
        }

        return true;
    }
};
