class Solution {
public:
    // This is a variation of Longest Increasing Subsequence probelem

    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        sort(pairs.begin(), pairs.end());          // Sort bcoz the qs said we can use in any order
        int maxLis = 1;
        vector<int> t(n, 1);                 // t[i] array which shows us the LIS for ith element up until that ith index after including itself
        for(int i = 0; i<n; i++){
            for(int j = 0; j<i; j++){
                if(pairs[j][1]<pairs[i][0]){
                    t[i] = max(t[i], t[j] + 1);    // updates value of t array with the LIS
                    maxLis = max(maxLis, t[i]);
                }
            }
        }
        return maxLis;
    }
};
